}
})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
scaplot <- eventReactive(input$show_scaplo, {
#FIX ME
if (input$cont == "world") {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")} else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")
} else {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")
}
} else {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")} else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")
} else {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")
}
}})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
scaplot <- eventReactive(input$show_scaplo, {
#FIX ME
if (input$cont == "World") {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")} else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")} else {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
} else {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")} else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")
} else {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")
}
}})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
(ui = ui, server = server)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
scaplot <- eventReactive(input$show_scaplo, {
#FIX ME
if (input$cont == "World") {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
} else {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
}
})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bigdatareport',
token='AD1FA95C9F6D829F1274E905E4882631',
secret='<SECRET>')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bigdatareport',
token='AD1FA95C9F6D829F1274E905E4882631',
secret='<SECRET>')
rsconnect::deployApp('path/to/your/app')
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Packages------------------------------------------------
library(ggplot2)
library(tidyr)
library(reshape2)
library(tidyverse)
library(ggalt)
library(ggfortify)
library(dplyr)
library(sp)
library(tmap)
library(tidytext)
# DATA----------------------------------------------------
gapminder_alcohol <- read.csv("C:/Users/chenyu/Downloads/gapminder_alcohol.csv", header = TRUE)
country_to_continent <- read.csv("C:/Users/chenyu/Downloads/continents2.csv", header = TRUE, sep = ";")
readLines("C:/Users/chenyu/Downloads/wordcount_target1.txt")
alcohol <- gapminder_alcohol %>%
inner_join(country_to_continent, by = c("country" = "name"))
alcohol_continent <- alcohol %>%
group_by(region)
View(alcohol_continent)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Data Viz"),
sidebarLayout(
sidebarPanel(
selectInput("cont", "Select Continent", c("World", "Asia", "Europe", "Africa", "Americas", "Oceania")),
selectInput("Var1", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
selectInput("Var2", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
actionButton("show_scaplo", "Show plot")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("test")),
tabPanel("Table", DT::DTOutput("table"))
)
)
))
server <- function(input, output, session) {
scaplot <- eventReactive(input$show_scaplo, {
#FIX ME
if (input$cont == "World") {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
} else {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
}
})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Data Viz"),
sidebarLayout(
sidebarPanel(
selectInput("cont", "Select Continent", c("World", "Asia", "Europe", "Africa", "Americas", "Oceania")),
selectInput("Var1", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
selectInput("Var2", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
actionButton("show_scaplo", "Show plot")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("test")),
tabPanel("Table", DT::DTOutput("table"))
)
)
))
server <- function(input, output, session) {
scaplot <- eventReactive(input$show_scaplo, {
#FIX ME
if (input$cont == "World") {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
} else {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
}
})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
devtools::install_github("rstudio/rsconnect")
if(!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Data Viz"),
sidebarLayout(
sidebarPanel(
selectInput("cont", "Select Continent", c("World", "Asia", "Europe", "Africa", "Americas", "Oceania")),
selectInput("Var1", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
selectInput("Var2", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
actionButton("show_scaplo", "Show plot")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("test")),
tabPanel("Table", DT::DTOutput("table"))
)
)
))
server <- function(input, output, session) {
scaplot <- eventReactive(input$show_scaplo, {
#FIX ME
if (input$cont == "World") {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
} else {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
}
})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
# Packages------------------------------------------------
library(ggplot2)
library(tidyr)
library(reshape2)
library(tidyverse)
library(ggalt)
library(ggfortify)
library(dplyr)
library(sp)
library(tmap)
library(tidytext)
# DATA----------------------------------------------------
gapminder_alcohol <- read.csv("C:/Users/chenyu/Downloads/gapminder_alcohol.csv", header = TRUE)
country_to_continent <- read.csv("C:/Users/chenyu/Downloads/continents2.csv", header = TRUE, sep = ";")
readLines("C:/Users/chenyu/Downloads/wordcount_target1.txt")
alcohol <- gapminder_alcohol %>%
inner_join(country_to_continent, by = c("country" = "name"))
alcohol_continent <- alcohol %>%
group_by(region)
View(alcohol_continent)
ui <- fluidPage(
titlePanel("Data Viz"),
sidebarLayout(
sidebarPanel(
selectInput("cont", "Select Continent", c("World", "Asia", "Europe", "Africa", "Americas", "Oceania")),
selectInput("Var1", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
selectInput("Var2", "Select Variable", c("alcconsumption", "incomeperperson", "suicideper100th", "employrate", "urbanrate")),
actionButton("show_scaplo", "Show plot")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("test")),
tabPanel("Table", DT::DTOutput("table"))
)
)
))
server <- function(input, output, session) {
scaplot <- eventReactive(input$show_scaplo, {
#FIX ME
if (input$cont == "World") {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
} else {
if (input$Var1 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_x_log10() +
geom_smooth(se = FALSE, method = "lm")}
else if (input$Var2 ==  "incomeperperson") {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
scale_y_log10() +
geom_smooth(se = FALSE, method = "lm")}
else {
alcohol_continent %>%
filter(region == input$cont) %>%
ggplot(aes_string(input$Var1, input$Var2)) +
geom_point() +
geom_smooth(se = FALSE, method = "lm")}
}
})
output$test <- renderPlot({
scaplot()
})
output$table <- DT::renderDT({
alcohol_continent
})
}
shinyApp(ui = ui, server = server)
deployApp()
install.packages('rsconnect')
install.packages("rsconnect")
deployApp()
install.packages('rsconnect')
library(rsconnect)
deployApp()
shiny::runApp()
